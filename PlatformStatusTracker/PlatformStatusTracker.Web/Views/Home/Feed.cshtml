@model PlatformStatusTracker.Web.ViewModels.Home.HomeIndexViewModel
@using System.Globalization
@using System.Text
@using PlatformStatusTracker.Core.Data
@using PlatformStatusTracker.Core.Model
@using PlatformStatusTracker.Web.ViewModels.Home
@{
    Layout = null;
}
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Browser Platform Status Tracker</title>
    <link href="@Url.Action("Index", "Home", new object(), "https")" />
    <updated>@Model.LastUpdatedAt.ToString("yyyy-MM-dd'T'HH:mm:ss.fffK", DateTimeFormatInfo.InvariantInfo)</updated>
    <author>
        <name>Mayuki Sawatari</name>
    </author>
    <id>@Url.Action("Index", "Home", new object(), "http")</id>

    @foreach (var date in Model.Dates.OrderByDescending(x => x))
    {
        <entry>
            <title>@date.ToString("yyyy-MM-dd", new CultureInfo("en-us"))</title>
            <link href="@Url.Action("Changes", "Home", new { Date = date.ToString("yyyy-MM-dd") }, "https")" />
            <id>@Url.Action("Changes", "Home", new { Date = date.ToString("yyyy-MM-dd") }, "http")</id>
            <updated>@Model.GetUpdatedAtByDate(date).ToString("yyyy-MM-dd'T'HH:mm:ss.fffK", DateTimeFormatInfo.InvariantInfo)</updated>
            <content type="html">
                @{
                    var content = await Html.PartialAsync("Partial/ChangeSets", new ChangeSetsViewModel
                    {
                        HideIcon = true,
                        IeChangeSet = Model.IeChangeSetsByDate.ContainsKey(date) ? Model.IeChangeSetsByDate[date] : null,
                        ChromeChangeSet = Model.ChromeChangeSetsByDate.ContainsKey(date) ? Model.ChromeChangeSetsByDate[date] : null,
                        WebKitWebCoreChangeSet = Model.WebKitWebCoreChangeSetsByDate.ContainsKey(date) ? Model.WebKitWebCoreChangeSetsByDate[date] : null,
                        WebKitJavaScriptCoreChangeSet = Model.WebKitJavaScriptCoreChangeSetsByDate.ContainsKey(date) ? Model.WebKitJavaScriptCoreChangeSetsByDate[date] : null,
                        MozillaChangeSet = Model.MozillaChangeSetsByDate.ContainsKey(date) ? Model.MozillaChangeSetsByDate[date] : null,
                    });

                    var writer = new System.IO.StringWriter();
                    content.WriteTo(writer, HtmlEncoder);
                }
                @writer.ToString()
            </content>
        </entry>
    }
</feed>
